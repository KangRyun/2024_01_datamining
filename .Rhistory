data.splitdata.split
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### Library
library(caret)
library(dplyr)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
install.packages("ape")
### Library
library(caret)
library(dplyr)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 자료 추출: 구분=="승차", 6~24시
data.in <- data.raw %>%
subset(구분=="승차") %>%
dplyr::select(역명, X06.07시:X23.00시)
### 역별 승차인원 평균
data.mean <- sapply(data.in[-1],function(x) tapply(x, data.in$역명, mean))
data.mean %>% head()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### 표준화 변환
data.pre.pro <- preProcess(data.use, method = c("center", "scale"))
data.std <- predict(data.pre.pro, data.use)
data.std %>% summary()
### 거리계산 - euclidean
d <- dist(data.use, method="euclidean")
### 모형 적합 - average
fit.hclust <- hclust(d, method="average")
### Dendrogram
plot(fit.hclust)
plot(fit.hclust, hang=-1)
### 그룹 수 지정
n.group <- 3
### Dendrogram
plot(fit.hclust, hang=-1)
rect.hclust(fit.hclust, k=n.group, border="red")
### 군집 저장
groups <- cutree(fit.hclust, k=n.group)
table(groups)
### 시각화
#install.packages("ape")
library(ape)
### 색상
colors <- rainbow(n.group)
### 1
plot(as.phylo(fit.hclust), tip.color=colors[groups], type="phylogram")
### 2
plot(as.phylo(fit.hclust), tip.color=colors[groups], type="cladogram")
### 3
plot(as.phylo(fit.hclust), tip.color=colors[groups], type="fan")
### 4
plot(as.phylo(fit.hclust), tip.color=colors[groups], type="unrooted")
### 그룹별 평균
data.result.mean <- apply(data.use, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.use[,1], data.use[,2], type="n", xlab="", ylab="")
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
text(data.use[,1], data.use[,2], rownames(data.use), col=groups)
### 자료 구조 변경
data.out <- cbind(data.use, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
### Library
library(caret)
library(dplyr)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### Library
#install.packages('NbClust')
library(NbClust)
install.packages("NbClust")
### Library
library(caret)
library(dplyr)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### Library
#install.packages('NbClust')
library(NbClust)
### determining the best number of clusters
nc <- NbClust(data.use, distance = "euclidean", max.nc=10, method="kmeans")
nc.tb <- table(nc$Best.n[1,]) %>% sort(T)
layout(matrix(1))
barplot(nc.tb)
### 그룹 수 지정
n.group <- 3
### 모형 적합
fit.km <- kmeans(data.use, n.group)
### 군집의 중심값 확인
fit.km$centers
### 군집 저장
groups <- fit.km$cluster
table(groups)
### 그룹별 평균
data.result.mean <- apply(data.use, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.use[,1], data.use[,2], type="n", xlab="", ylab="")
text(data.use[,1], data.use[,2], rownames(data.use), col=fit.km$cluster)
points(fit.km$centers[,1], fit.km$centers[,2], col=1:3, pch=8, cex=1.5)
### 자료 구조 변경
data.out <- cbind(data.use, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### 표준화 변환
data.pre.pro <- preProcess(data.use, method = c("center", "scale"))
data.std <- predict(data.pre.pro, data.use)
data.std %>% summary()
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
?dbscan
??dbscan
table(groups)
### 군집 저장
groups <- fit.dbscan$cluster
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
install.packages("dbscan")
### Library
library(caret)
library(dplyr)
library(fpc)
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
library(dbscan)
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
### 군집 저장
groups <- fit.dbscan$cluster
table(groups)
### 그룹별 평균
data.result.mean <- apply(data.std, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.std[,1], data.std[,2], type="n", xlab="", ylab="")
text(data.std[,1], data.std[,2], rownames(data.std), col=fit.km$cluster)
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
### Library
library(caret)
library(dplyr)
library(fpc)
### Library
library(caret)
library(dplyr)
library(fpc)
install.packages("fpc")
### Library
library(caret)
library(dplyr)
library(fpc)
library(dbscan)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### 표준화 변환
data.pre.pro <- preProcess(data.use, method = c("center", "scale"))
data.std <- predict(data.pre.pro, data.use)
data.std %>% summary()
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
### 군집 저장
groups <- fit.dbscan$cluster
table(groups)
### 그룹별 평균
data.result.mean <- apply(data.std, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.std[,1], data.std[,2], type="n", xlab="", ylab="")
text(data.std[,1], data.std[,2], rownames(data.std), col=fit.km$cluster)
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
### 자료 구조 변경
data.out <- cbind(data.std, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
### Library
library(caret)
library(dplyr)
library(fpc)
library(dbscan)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### 표준화 변환
data.pre.pro <- preProcess(data.use, method = c("center", "scale"))
data.std <- predict(data.pre.pro, data.use)
data.std %>% summary()
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
### 군집 저장
groups <- fit.dbscan$cluster
table(groups)
### 그룹별 평균
data.result.mean <- apply(data.std, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.std[,1], data.std[,2], type="n", xlab="", ylab="")
text(data.std[,1], data.std[,2], rownames(data.std), col=fit.km$cluster)
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
### 자료 구조 변경
data.out <- cbind(data.std, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
### Library
library(caret)
library(dplyr)
library(fpc)
library(dbscan)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### 표준화 변환
data.pre.pro <- preProcess(data.use, method = c("center", "scale"))
data.std <- predict(data.pre.pro, data.use)
data.std %>% summary()
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
### 군집 저장
groups <- fit.dbscan$cluster
table(groups)
### 그룹별 평균
data.result.mean <- apply(data.std, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.std[,1], data.std[,2], type="n", xlab="", ylab="")
text(data.std[,1], data.std[,2], rownames(data.std), col=fit.km$cluster)
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
### 자료 구조 변경
data.out <- cbind(data.std, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
### Library
library(caret)
library(dplyr)
library(fpc)
library(dbscan)
### 파일 선택
data.file <- 'data/대전교통공사_시간대별 승하차인원_20240331.csv'
### CSV 파일 읽기
data.raw <- read.csv(data.file, header=T, stringsAsFactors=T, fileEncoding = "CP949")
data.raw %>% dim()
### 분산이 큰 시간대 변수 5개 추출
data.var <- apply(data.mean, 2, var) %>% sort(T)
data.names <- names(data.var[1:5])
data.use <- data.mean[,data.names]
data.use %>% head()
### 표준화 변환
data.pre.pro <- preProcess(data.use, method = c("center", "scale"))
data.std <- predict(data.pre.pro, data.use)
data.std %>% summary()
### DBSCAN 모형 적합
fit.dbscan <- dbscan(data.std, eps=1.5, MinPts=3)
fit.dbscan
### 군집 저장
groups <- fit.dbscan$cluster
table(groups)
### 그룹별 평균
data.result.mean <- apply(data.std, 2, function(x) tapply(x, groups, mean))
data.result.mean
### 군집 그림
plot(data.std[,1], data.std[,2], type="n", xlab="", ylab="")
text(data.std[,1], data.std[,2], rownames(data.std), col=fit.km$cluster)
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
### 자료 구조 변경
data.out <- cbind(data.std, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
### 군집 그림
plot(data.std[,1], data.std[,2], type="n", xlab="", ylab="")
text(data.std[,1], data.std[,2], rownames(data.std), col=fit.km$cluster)
points(data.result.mean[,1], data.result.mean[,2], col=1:3, pch=8, cex=1.5)
### 자료 구조 변경
data.out <- cbind(data.std, groups) %>% data.frame()
data.melt <- reshape2::melt(data.out, "groups")
data.melt %>% head()
### Plotly
library(plotly)
plot_ly(data.melt, x = ~groups, y = ~value, split = ~variable, type = "box") %>% layout(boxmode = "group")
library(dplyr)
library(igraph)
library(ggraph)
data.raw <- read.csv("./data/서울특별시_지하철 역별 OD.csv", header = T, fileEncoding = "CP949")
data.raw %>% dim()
data.raw %>% summary()
### 자료처리
data.use <- data.raw %>%
filter(승차_호선=="2호선" & 하차_호선=="2호선") %>%
filter(총_승객수>2000) %>%
select(승차_역, 하차_역, 총_승객수)
data.use %>% dim()
### 그래프 자료로 저장
data.g <- graph_from_data_frame(data.use)
### 연결망 그래프: plot.igraph()
plot(data.g, edge.arrow.size=0.5, edge.curved=0.2)
### 연결망 그래프 - 링크 가충치
E(data.g)$width <- data.use$총_승객수/1000
plot(data.g, edge.curved=0.2)
ggraph(data.g, layout = 'graphopt') +
geom_edge_link(arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), col = "gray50", size = 4) +
theme(legend.position = "none")
ggraph(data.g, layout = 'linear', circular = TRUE) +
geom_edge_arc(arrow = arrow(length = unit(4, 'mm')),
start_cap = circle(3, 'mm'),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 3) +
coord_fixed() +
geom_node_text(aes(label = name), col = "gray50", size = 4) +
theme(legend.position = "none")
ggraph(data.g, layout = 'graphopt') +
geom_edge_link(aes(start_cap = label_rect(node1.name),
end_cap = label_rect(node2.name),
width = 총_승객수, edge_alpha = 총_승객수),
arrow = arrow(length = unit(4, 'mm'))) +
geom_node_text(aes(label = name))
ggraph(data.g, layout = "fr") +
geom_edge_link(aes(width = 총_승객수, edge_alpha = 총_승객수), edge_colour = "pink") +
geom_node_text(aes(label = name), col = "darkgreen", size = 4) +
theme(legend.position = "none")
ggraph(data.g, layout = "linear", circular = TRUE) +
geom_edge_arc(aes(width = 총_승객수, edge_alpha = 총_승객수), edge_colour = "pink") +
geom_node_text(aes(label = name), col = "darkgreen", size = 4) +
theme(legend.position = "none") +
coord_fixed()
### library
library(dplyr)
library(lattice)
library(udpipe)
### N(체언) 추출 함수
fn_extract_noun <- function(data, pos = 9) {
data_split_lemma <- base::strsplit(data["lemma"], split = "+", fixed = T)[[1]]
data_split_xpos <- base::strsplit(data["xpos"], split = "+", fixed = T)[[1]]
retern_val <- NA
if(length(data_split_lemma)==length(data_split_xpos)){
idx_n <- substr(data_split_xpos, 1, 1)=="n"
if(sum(idx_n)>0) retern_val <- data_split_lemma[idx_n]
}
retern_val
}
fn_extract_noun_only <- function(txt, rm.dup = F, pos = 9) {
res <- udpipe(x = txt, object = "korean-kaist") %>% apply(1, fn_extract_noun, pos = pos) %>% unlist()
res <- res[!is.na(res)]
if(rm.dup) res <- unique(res)
res
}
### 파일 읽기
song.100 <- read.csv('data/멜론_202404_100곡.csv', header = T, encoding = 'UTF-8')
### 가사 선택
song.text <- song.100$가사
song.text %>% class()
song.text %>% mode()
### 줄바꿈(\n) 제거
song.text <- gsub('\n', ' ', song.text)
### 명사 추출 > 노래별 가사 중복 제거
text.noun <- sapply(song.text, fn_extract_noun_only, rm.dup = T)
names(text.noun) <- NULL
text.noun %>% head()
### 노래별 추출된 단어를 하나의 벡터로 변환
text.noun.all <- text.noun %>% unlist()
text.noun.all %>% head(50)
### 한글 추출
text.noun.han <- gsub('[^가-힣]', '', text.noun.all)
text.noun.han %>% head(50)
### 2자 이상 단어를 추출
text.noun.han <- text.noun.han[nchar(text.noun.han) > 1]
df_noun <- table(text.noun.han) %>% data.frame() %>% arrange(Freq %>% desc())
df_noun %>% head(20)
### library
library(ggplot2)
### 막대 그래프
ggp <- df_noun %>% head(20) %>%
ggplot(aes(text.noun.han %>% reorder(-Freq), Freq)) +
geom_col(fill = "skyblue") +
xlab("단어") +
theme_minimal()
ggp
### library
library(wordcloud2)
df_noun %>% wordcloud2(minSize = 10)
df_noun %>%
wordcloud2(
fontFamily='NanumGothic',
size = 0.8, color = 'random-dark',
minRotation=0, maxRotation=0,
minSize=10)
### Library
library(tidyverse)
library(tidygraph)
library(ggraph)
data.df <- data.frame(keyword = text.noun.han)
bigram.df <-
data.df %>%
mutate(lead=lead(keyword)) %>%
filter(keyword != lead) %>%
unite(bigram, c(keyword, lead), sep=' ') %>%
count(bigram, sort=TRUE) %>%
filter(n>=2) %>%
separate(bigram, c('word1', 'word2'), sep=' ')
bigram.df %>% dim()
bigram.df %>% head()
bigram.df %>% as_tbl_graph() %>% plot()
bigram.df %>% as_tbl_graph() %>%
ggraph(layout = 'nicely') +
geom_edge_link() +
geom_node_text(aes(label=name))
### News
data.raw <- readLines('data/news_keyword.txt')
data.raw <- data.raw[-1]
data.raw %>% head()
data.split <- strsplit(data.raw, ',')
data.splitdata.split
### Packages
library(ggplot2)
library(dplyr)
install.packages("GGally")
### Figure 12.1 data
blue_jays <- read.csv('data/blue_jays.csv')
### Figure 12.1 data
blue_jays <- read.csv('data/blue_jays.csv')
### Figure 12.1 data
blue_jays <- read.csv('/data/blue_jays.csv')
getwd('data_vis')
getwd('/data_vis')
